// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //check if we store A value in A register or not
Not(in=instruction[15], out= isAInstruction);
Not(in=isAInstruction, out= isCInstruction);

//determine where to store ALU output
Or(a= isAInstruction, b=instruction[5], out=writeA);
And(a= instruction[15], b= instruction[4], out=writeD);
And(a= instruction[15], b= instruction[3], out=writeM, out= writeM2);

//A register
Mux16(a= instruction, b= outALU, sel= isCInstruction, out=inA);
ARegister(in= inA, load= writeA, out= outA, out[0..14]= addressM);

//D register
DRegister(in= outALU, load= writeD, out= outD);

//decode a instruction, is the ALU using the A register or M register
Mux16(a= outA, b= inM, sel= instruction[12], out= outAorM);

//ALU chip
ALU(
	x= outD,
	y= outAorM,
	zx= instruction[11],
	nx= instruction[10],
	zy= instruction[9],
	ny= instruction[8],
	f= instruction[7],
	no= instruction[6],
	out= outALU,
	zr= zr,
	ng= ng);
	
//check if we should write to memory
Mux16(a= false, b= outALU, sel= writeM2, out= outM);

//check if we should jump to a different instruction
Not(in=zr, out= isNotZero);
Not(in=ng, out= isNotNeg);
And(a= isNotZero, b= isNotNeg, out= isPos);

And(a= isPos, b= instruction[0], out= jumpPos);
And(a= zr, b= instruction[1], out= jumpZero);
And(a= ng, b= instruction[2], out= jumpNeg);

Or(a= jumpPos, b= jumpNeg, out= jump1);
Or(a= jump1, b= jumpZero, out= jump2);
And(a= jump2, b=isCInstruction, out= jump);
Not(in= jump, out= incPC);

PC(in= outA, inc= incPC, load= jump, reset= reset, out[0..14]= pc);
	 
}